import { TwingBaseNode, TwingBaseNodeAttributes } from "../node";
import type { TwingBaseExpressionNode } from "./expression";
import type { TwingTemplate } from "../template";
import type { TwingExecutionContext } from "../execution-context";
export type TwingBaseIncludeNodeAttributes = TwingBaseNodeAttributes & {
    only: boolean;
    ignoreMissing: boolean;
};
export type TwingBaseIncludeNodeChildren = {
    variables: TwingBaseExpressionNode;
};
export interface TwingBaseIncludeNode<Type extends string, Attributes extends TwingBaseIncludeNodeAttributes = TwingBaseIncludeNodeAttributes, Children extends TwingBaseIncludeNodeChildren = TwingBaseIncludeNodeChildren> extends TwingBaseNode<Type, Attributes, Children> {
}
export declare const createBaseIncludeNode: <Type extends string, Attributes extends TwingBaseIncludeNodeAttributes, Children extends TwingBaseIncludeNodeChildren = TwingBaseIncludeNodeChildren>(type: Type, attributes: Attributes, children: Children, getTemplate: (executionContext: TwingExecutionContext) => Promise<TwingTemplate | null | Array<TwingTemplate | null>>, line: number, column: number, tag: string) => TwingBaseIncludeNode<Type, Attributes, Children>;
