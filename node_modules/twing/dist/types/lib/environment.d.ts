import { TwingTagHandler } from "./tag-handler";
import { TwingNodeVisitor } from "./node-visitor";
import { TwingFilter } from "./filter";
import { TwingParserOptions } from "./parser";
import { TwingLoader } from "./loader";
import { TwingTest } from "./test";
import { TwingFunction } from "./function";
import { TwingOperator } from "./operator";
import { TwingEscapingStrategy, TwingEscapingStrategyHandler } from "./escaping-strategy";
import { TwingSource } from "./source";
import { TwingTokenStream } from "./token-stream";
import { TwingExtension } from "./extension";
import { TwingTemplateNode } from "./node/template";
import { RawSourceMap } from "source-map";
import { TwingSandboxSecurityPolicy } from "./sandbox/security-policy";
import { TwingTemplate } from "./template";
import { TwingCache } from "./cache";
import { type TwingContext } from "../lib";
export type TwingNumberFormat = {
    numberOfDecimals: number;
    decimalPoint: string;
    thousandSeparator: string;
};
export type TwingEnvironmentOptions = {
    /**
     * The implicit auto-escaping strategy to apply to the templates.
     *
     * Analogous to adding an `autoescape` tag at the top of each loaded template.
     */
    autoEscapingStrategy?: string;
    /**
     * Controls whether the templates are recompiled whenever their content changes or not.
     *
     * When set to `true`, templates are recompiled whenever their content changes instead of fetching them from the persistent cache. Note that this won't invalidate the environment inner cache but only the cache passed using the `cache` option. Defaults to `false`.
     */
    autoReload?: boolean;
    /**
     * The persistent cache instance.
     */
    cache?: TwingCache;
    /**
     * The default charset. Defaults to "UTF-8".
     */
    charset?: string;
    dateFormat?: string;
    dateIntervalFormat?: string;
    globals?: Record<string, any>;
    numberFormat?: TwingNumberFormat;
    parserOptions?: TwingParserOptions;
    sandboxed?: boolean;
    sandboxPolicy?: TwingSandboxSecurityPolicy;
    /**
     * Controls whether accessing invalid variables (variables and or attributes/methods that do not exist) triggers a runtime error.
     *
     * When set to `true`, accessing invalid variables triggers a runtime error.
     * When set to `false`, accessing invalid variables returns `null`.
     *
     * Defaults to `false`.
     */
    strictVariables?: boolean;
    timezone?: string;
};
export interface TwingEnvironment {
    readonly charset: string;
    readonly dateFormat: string;
    readonly dateIntervalFormat: string;
    readonly escapingStrategyHandlers: Record<TwingEscapingStrategy, TwingEscapingStrategyHandler>;
    readonly numberFormat: TwingNumberFormat;
    readonly filters: Map<string, TwingFilter>;
    readonly functions: Map<string, TwingFunction>;
    readonly globals: TwingContext<string, any>;
    readonly isStrictVariables: boolean;
    readonly loader: TwingLoader;
    readonly sandboxPolicy: TwingSandboxSecurityPolicy;
    readonly tests: Map<string, TwingTest>;
    readonly timezone: string;
    /**
     * Convenient method...
     *
     * @param extension
     */
    addExtension(extension: TwingExtension): void;
    addFilter(filter: TwingFilter): void;
    addFunction(aFunction: TwingFunction): void;
    addNodeVisitor(visitor: TwingNodeVisitor): void;
    addOperator(operator: TwingOperator): void;
    addTagHandler(parser: TwingTagHandler): void;
    addTest(test: TwingTest): void;
    /**
     * Loads a template by its name.
     *
     * @param name The name of the template to load
     * @param from The name of the template that requested the load
     *
     * @throws {TwingTemplateLoadingError}  When the template cannot be found
     * @throws {TwingParsingError} When an error occurred during the parsing of the source
     *
     * @return
     */
    loadTemplate(name: string, from?: string | null): Promise<TwingTemplate>;
    /**
     * Register the passed listener...
     *
     * When a template is encountered, Twing environment emits a `template` event with the name of the encountered template and the source of the template that initiated the loading.
     */
    on(eventName: "load", listener: (name: string, from: string | null) => void): void;
    /**
     * Converts a token list to a template.
     *
     * @param {TwingTokenStream} stream
     * @param {TwingParserOptions} options
     * *
     * @throws {TwingParsingError} When the token stream is syntactically or semantically wrong
     */
    parse(stream: TwingTokenStream, options?: TwingParserOptions): TwingTemplateNode;
    /**
     * Convenient method that renders a template from its name.
     */
    render(name: string, context: Record<string, any>): Promise<string>;
    /**
     * Convenient method that renders a template from its name and returns both the render result and its belonging source map.
     */
    renderWithSourceMap(name: string, context: Record<string, any>): Promise<{
        data: string;
        sourceMap: RawSourceMap;
    }>;
    registerEscapingStrategy(handler: TwingEscapingStrategyHandler, name: string): void;
    /**
     * Tokenizes a source code.
     *
     * @param {TwingSource} source The source to tokenize
     * @return {TwingTokenStream}
     */
    tokenize(source: TwingSource): TwingTokenStream;
}
/**
 * Creates an instance of {@link TwingEnvironment} backed by the passed loader.
 *
 * @param loader
 * @param options
 */
export declare const createEnvironment: (loader: TwingLoader, options?: TwingEnvironmentOptions) => TwingEnvironment;
