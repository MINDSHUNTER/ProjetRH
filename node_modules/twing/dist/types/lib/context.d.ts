export interface TwingContext<K, V> {
    readonly size: number;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    clone(): TwingContext<K, V>;
    delete(key: K): boolean;
    entries(): IterableIterator<[K, V]>;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): TwingContext<K, V>;
    values(): IterableIterator<V>;
}
export declare const createContext: <K extends string, V>(container?: Map<K, V>) => TwingContext<K, V>;
