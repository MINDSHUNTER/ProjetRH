"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContextValue = void 0;
const runtime_1 = require("../error/runtime");
const getContextValue = (charset, templateName, isStrictVariables, context, name, isAlwaysDefined, shouldIgnoreStrictCheck, shouldTestExistence) => {
    const specialNames = new Map([
        ['_self', templateName],
        ['_context', context],
        ['_charset', charset]
    ]);
    const isSpecial = () => {
        return specialNames.has(name);
    };
    let result;
    if (shouldTestExistence) {
        if (isSpecial()) {
            result = true;
        }
        else {
            result = context.has(name);
        }
    }
    else if (isSpecial()) {
        result = specialNames.get(name);
    }
    else if (isAlwaysDefined) {
        result = context.get(name);
    }
    else {
        if (shouldIgnoreStrictCheck || !isStrictVariables) {
            result = context.has(name) ? context.get(name) : null;
        }
        else {
            result = context.get(name);
            if (result === undefined) {
                return Promise.reject((0, runtime_1.createRuntimeError)(`Variable "${name}" does not exist.`));
            }
        }
    }
    return Promise.resolve(result);
};
exports.getContextValue = getContextValue;
