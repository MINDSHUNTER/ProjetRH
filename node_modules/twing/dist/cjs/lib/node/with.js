"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWithNode = void 0;
const node_1 = require("../node");
const runtime_1 = require("../error/runtime");
const context_1 = require("../context");
const merge_iterables_1 = require("../helpers/merge-iterables");
const iterator_to_map_1 = require("../helpers/iterator-to-map");
const createWithNode = (body, variables, only, line, column, tag) => {
    const children = {
        body
    };
    if (variables) {
        children.variables = variables;
    }
    const baseNode = (0, node_1.createBaseNode)("with", {
        only
    }, children, line, column, tag);
    const withNode = Object.assign(Object.assign({}, baseNode), { execute: async (executionContext) => {
            const { template, context } = executionContext;
            const { variables: variablesNode, body } = baseNode.children;
            const { only } = baseNode.attributes;
            let scopedContext;
            if (variablesNode) {
                const variables = await variablesNode.execute(executionContext);
                if (typeof variables !== "object") {
                    throw (0, runtime_1.createRuntimeError)(`Variables passed to the "with" tag must be a hash.`, withNode, template.name);
                }
                if (only) {
                    scopedContext = (0, context_1.createContext)();
                }
                else {
                    scopedContext = context.clone();
                }
                scopedContext = (0, context_1.createContext)((0, merge_iterables_1.mergeIterables)(scopedContext, (0, iterator_to_map_1.iteratorToMap)(variables)));
            }
            else {
                scopedContext = context.clone();
            }
            scopedContext.set('_parent', context.clone());
            await body.execute(Object.assign(Object.assign({}, executionContext), { context: scopedContext }));
        } });
    return withNode;
};
exports.createWithNode = createWithNode;
