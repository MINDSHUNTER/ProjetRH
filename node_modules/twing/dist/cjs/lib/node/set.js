"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSetNode = void 0;
const node_1 = require("../node");
const constant_1 = require("./expression/constant");
const wrapper_1 = require("./wrapper");
const createSetNode = (captures, names, values, line, column, tag) => {
    const baseNode = (0, node_1.createBaseNode)("set", {
        captures
    }, {
        names,
        values
    }, line, column, tag);
    /*
     * Optimizes the node when capture is used for a large block of text.
     *
     * {% set foo %}foo{% endset %} is compiled to $context['foo'] = new Twig_Markup("foo");
     */
    if (baseNode.attributes.captures) {
        const values = baseNode.children.values;
        if (values.type === "text") {
            baseNode.children.values = (0, wrapper_1.createWrapperNode)({
                0: (0, constant_1.createConstantNode)(values.attributes.data, values.line, values.column)
            }, values.line, values.column);
            baseNode.attributes.captures = false;
        }
    }
    const setNode = Object.assign(Object.assign({}, baseNode), { execute: async (executionContext) => {
            const { context, outputBuffer } = executionContext;
            const { names: namesNode, values: valuesNode } = setNode.children;
            const { captures } = setNode.attributes;
            const names = await namesNode.execute(executionContext);
            if (captures) {
                outputBuffer.start();
                await valuesNode.execute(executionContext);
                const value = outputBuffer.getAndClean();
                for (const name of names) {
                    context.set(name, value);
                }
            }
            else {
                const values = await valuesNode.execute(executionContext);
                let index = 0;
                for (const name of names) {
                    const value = values[index];
                    context.set(name, value);
                    index++;
                }
            }
        } });
    return setNode;
};
exports.createSetNode = createSetNode;
