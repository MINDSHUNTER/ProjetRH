"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCheckSecurityNode = void 0;
const node_1 = require("../node");
const security_not_allowed_filter_error_1 = require("../sandbox/security-not-allowed-filter-error");
const security_not_allowed_tag_error_1 = require("../sandbox/security-not-allowed-tag-error");
const createCheckSecurityNode = (usedFilters, usedTags, usedFunctions, line, column) => {
    const baseNode = (0, node_1.createBaseNode)("check_security", {
        usedFilters,
        usedTags,
        usedFunctions
    }, {}, line, column);
    return Object.assign(Object.assign({}, baseNode), { execute: (executionContext) => {
            const { template, sandboxed } = executionContext;
            const { usedTags, usedFunctions, usedFilters } = baseNode.attributes;
            try {
                sandboxed && template.checkSecurity([...usedTags.keys()], [...usedFilters.keys()], [...usedFunctions.keys()]);
            }
            catch (error) {
                const supplementError = (error) => {
                    error.source = template.name;
                    if ((0, security_not_allowed_tag_error_1.isASandboxSecurityNotAllowedTagError)(error)) {
                        error.location = usedTags.get(error.tagName);
                    }
                    else if ((0, security_not_allowed_filter_error_1.isASandboxSecurityNotAllowedFilterError)(error)) {
                        error.location = usedFilters.get(error.filterName);
                    }
                    else {
                        error.location = usedFunctions.get(error.functionName);
                    }
                };
                supplementError(error);
                throw error;
            }
            return Promise.resolve();
        } });
};
exports.createCheckSecurityNode = createCheckSecurityNode;
