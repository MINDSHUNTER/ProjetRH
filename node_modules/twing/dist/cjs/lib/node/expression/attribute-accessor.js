"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloneGetAttributeNode = exports.createAttributeAccessorNode = void 0;
const expression_1 = require("../expression");
const get_attribute_1 = require("../../helpers/get-attribute");
const traceable_method_1 = require("../../helpers/traceable-method");
const createAttributeAccessorNode = (target, attribute, methodArguments, type, line, column) => {
    const baseNode = (0, expression_1.createBaseExpressionNode)("attribute_accessor", {
        isOptimizable: true,
        type,
        shouldTestExistence: false
    }, {
        target,
        attribute,
        arguments: methodArguments
    }, line, column);
    const attributeAccessorNode = Object.assign(Object.assign({}, baseNode), { execute: (executionContext) => {
            const { template, sandboxed, isStrictVariables } = executionContext;
            const { target, attribute, arguments: methodArguments } = attributeAccessorNode.children;
            const { type, shouldIgnoreStrictCheck, shouldTestExistence } = attributeAccessorNode.attributes;
            return Promise.all([
                target.execute(executionContext),
                attribute.execute(executionContext),
                methodArguments.execute(executionContext)
            ]).then(([target, attribute, methodArguments]) => {
                const traceableGetAttribute = (0, traceable_method_1.getTraceableMethod)(get_attribute_1.getAttribute, attributeAccessorNode.line, attributeAccessorNode.column, template.name);
                return traceableGetAttribute(template, target, attribute, methodArguments, type, shouldTestExistence, shouldIgnoreStrictCheck || null, sandboxed, isStrictVariables);
            });
        } });
    return attributeAccessorNode;
};
exports.createAttributeAccessorNode = createAttributeAccessorNode;
const cloneGetAttributeNode = (attributeAccessorNode) => {
    const { children, attributes, line, column } = attributeAccessorNode;
    const { arguments: methodArguments, attribute, target } = children;
    const { type } = attributes;
    return (0, exports.createAttributeAccessorNode)(target, attribute, methodArguments, type, line, column);
};
exports.cloneGetAttributeNode = cloneGetAttributeNode;
