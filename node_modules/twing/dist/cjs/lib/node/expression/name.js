"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloneNameNode = exports.createNameNode = void 0;
const node_1 = require("../../node");
const get_context_value_1 = require("../../helpers/get-context-value");
const traceable_method_1 = require("../../helpers/traceable-method");
const merge_iterables_1 = require("../../helpers/merge-iterables");
const context_1 = require("../../context");
const createNameNode = (name, line, column) => {
    const attributes = {
        name,
        isAlwaysDefined: false,
        shouldIgnoreStrictCheck: false,
        shouldTestExistence: false
    };
    const baseNode = (0, node_1.createBaseNode)("name", attributes, {}, line, column);
    const nameNode = Object.assign(Object.assign({}, baseNode), { execute: async ({ template, context, charset, isStrictVariables, globals }) => {
            const { name, isAlwaysDefined, shouldIgnoreStrictCheck, shouldTestExistence } = nameNode.attributes;
            const traceableGetContextValue = (0, traceable_method_1.getTraceableMethod)(get_context_value_1.getContextValue, nameNode.line, nameNode.column, template.name);
            return traceableGetContextValue(charset, template.name, isStrictVariables, (0, context_1.createContext)((0, merge_iterables_1.mergeIterables)(globals, context)), name, isAlwaysDefined, shouldIgnoreStrictCheck, shouldTestExistence);
        } });
    return nameNode;
};
exports.createNameNode = createNameNode;
const cloneNameNode = (nameNode) => {
    return (0, exports.createNameNode)(nameNode.attributes.name, nameNode.line, nameNode.column);
};
exports.cloneNameNode = cloneNameNode;
