"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createArrayNode = exports.createBaseArrayNode = exports.getKeyValuePairs = void 0;
const expression_1 = require("../expression");
const constant_1 = require("./constant");
const record_1 = require("../../helpers/record");
const array_chunk = require('locutus/php/array/array_chunk');
const getKeyValuePairs = (node) => {
    const chunks = array_chunk(Object.values(node.children), 2);
    return chunks.map(([key, value]) => {
        return { key, value };
    });
};
exports.getKeyValuePairs = getKeyValuePairs;
const createBaseArrayNode = (type, elements, line, column) => {
    const children = {};
    for (const { key, value } of elements) {
        (0, record_1.pushToRecord)(children, key);
        (0, record_1.pushToRecord)(children, value);
    }
    const baseNode = (0, expression_1.createBaseExpressionNode)(type, {}, children, line, column);
    const node = Object.assign({}, baseNode);
    return node;
};
exports.createBaseArrayNode = createBaseArrayNode;
const createArrayNode = (elements, line, column) => {
    let index = 0;
    const baseNode = (0, exports.createBaseArrayNode)("array", elements.map(({ key, value }) => {
        return {
            key: key || (0, constant_1.createConstantNode)(index++, line, column),
            value
        };
    }), line, column);
    return Object.assign(Object.assign({}, baseNode), { execute: async (executionContext) => {
            const keyValuePairs = (0, exports.getKeyValuePairs)(baseNode);
            const array = [];
            for (const { value: valueNode } of keyValuePairs) {
                const value = await valueNode.execute(executionContext);
                if (valueNode.type === "spread") {
                    array.push(...value);
                }
                else {
                    array.push(value);
                }
            }
            return array;
        } });
};
exports.createArrayNode = createArrayNode;
