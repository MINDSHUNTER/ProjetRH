"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createForNode = void 0;
const node_1 = require("../node");
const for_loop_1 = require("./for-loop");
const if_1 = require("./if");
const ensure_traversable_1 = require("../helpers/ensure-traversable");
const count_1 = require("../helpers/count");
const iterate_1 = require("../helpers/iterate");
const createForNode = (keyTarget, valueTarget, sequence, ifExpression, body, elseNode, line, column, tag) => {
    const loop = (0, for_loop_1.createForLoopNode)(line, column, tag);
    const bodyChildren = {};
    let i = 0;
    bodyChildren[i++] = body;
    bodyChildren[i++] = loop;
    let actualBody = (0, node_1.createBaseNode)(null, {}, bodyChildren, line, column);
    if (ifExpression) {
        const ifChildren = {};
        let i = 0;
        ifChildren[i++] = ifExpression;
        ifChildren[i++] = actualBody;
        actualBody = (0, if_1.createIfNode)((0, node_1.createBaseNode)(null, {}, ifChildren, line, column), null, line, column);
        loop.attributes.hasAnIf = true;
    }
    const children = {
        keyTarget: keyTarget,
        valueTarget: valueTarget,
        sequence: sequence,
        body: actualBody,
    };
    if (elseNode) {
        children.else = elseNode;
        loop.attributes.hasAnElse = true;
    }
    const baseNode = (0, node_1.createBaseNode)("for", {
        hasAnIf: ifExpression !== null
    }, children, line, column, tag);
    const forNode = Object.assign(Object.assign({}, baseNode), { execute: async (executionContext) => {
            const { context } = executionContext;
            const { sequence: sequenceNode, body, else: elseNode, valueTarget: targetValueNode, keyTarget: targetKeyNode } = forNode.children;
            const { hasAnIf } = forNode.attributes;
            context.set('_parent', context.clone());
            const executedSequence = await sequenceNode.execute(executionContext);
            let sequence = (0, ensure_traversable_1.ensureTraversable)(executedSequence);
            context.set('_seq', sequence);
            if (elseNode) {
                context.set('_iterated', false);
            }
            context.set('loop', new Map([
                ['parent', context.get('_parent')],
                ['index0', 0],
                ['index', 1],
                ['first', true],
            ]));
            if (!hasAnIf) {
                const length = (0, count_1.count)(context.get('_seq'));
                const loop = context.get('loop');
                loop.set('revindex0', length - 1);
                loop.set('revindex', length);
                loop.set('length', length);
                loop.set('last', (length === 1));
            }
            const targetKey = await targetKeyNode.execute(executionContext);
            const targetValue = await targetValueNode.execute(executionContext);
            await (0, iterate_1.iterate)(context.get('_seq'), async (key, value) => {
                context.set(targetKey, key);
                context.set(targetValue, value);
                await body.execute(executionContext);
            });
            if (elseNode) {
                if (context.get('_iterated') === false) {
                    await elseNode.execute(executionContext);
                }
            }
            const parent = context.get('_parent');
            context.delete('_seq');
            context.delete('_iterated');
            context.delete(keyTarget.attributes.name);
            context.delete(valueTarget.attributes.name);
            context.delete('_parent');
            context.delete('loop');
            for (const [key, value] of parent) {
                if (!context.has(key)) {
                    context.set(key, value);
                }
            }
        } });
    return forNode;
};
exports.createForNode = createForNode;
